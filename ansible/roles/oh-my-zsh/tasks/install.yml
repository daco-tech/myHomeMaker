---
- name: Delete oh-my-zsh user directory
  file:
    state: absent
    path: /home/{{ username }}/.oh-my-zsh
  with_items: "{{ users | map(attribute='username') | list }}"
  loop_control:
    loop_var: username

- name: clone oh-my-zsh for users
  become: yes
  become_user: "{{ username }}"
  ansible.builtin.git:
    repo: https://github.com/robbyrussell/oh-my-zsh.git
    dest: /home/{{ username }}/.oh-my-zsh
    clone: yes
    update: yes
  with_items: "{{ users | map(attribute='username') | list }}"
  loop_control:
    loop_var: username

- name: set permissions of oh-my-zsh for users
  become: yes
  become_user: "{{ username }}"
  file:
    path: "~{{ username }}/.oh-my-zsh"
    # Prevent the cloned repository from having insecure permissions. Failing to do
    # so causes compinit() calls to fail with "command not found: compdef" errors
    # for users with insecure umasks (e.g., "002", allowing group writability).
    mode: "go-w"
    recurse: yes
  with_items: "{{ users | map(attribute='username') | list }}"
  loop_control:
    loop_var: username

- name: Change zsh dir permission
  become: yes
  become_user: "root"
  file:
    path: /usr/local/share/zsh
    state: directory
    owner: "root"
    group: "staff"
    mode: 0755
  when:
    - ansible_facts['system'] == "Darwin"

- name: Change zsh site-functions dir permission
  become: yes
  become_user: "root"
  file:
    path: /usr/local/share/zsh/site-functions
    state: directory
    owner: "root"
    group: "staff"
    mode: 0755
  when:
    - ansible_facts['system'] == "Darwin"

- name: set default shell for users
  become: yes
  become_user: "{{ username }}"
  #become_user: root
  user:
    name: "{{ username }}"
    shell: /bin/zsh
  with_items: "{{ users | map(attribute='username') | list }}"
  loop_control:
    loop_var: username

- name: write .zshrc for users
  become: yes
  become_user: "{{ user.username }}"
  template:
    src: zshrc.j2
    dest: "~{{ user.username }}/.zshrc"
    backup: yes
    mode: "u=rw,go=r"
  with_items: "{{ users }}"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"
